# 任意选一个你喜欢的整数，这能帮你得到稳定的结果
seed = 9999

# # 1 矩阵运算
# ## 1.1 创建一个 4*4 的单位矩阵

# 本项目要求矩阵统一使用二维列表表示，如下：
A = [[1,2,3], 
     [2,3,3], 
     [1,2,5]]

I = [([0] * 4) for i in range(4)]

I[0]=([1,0,0,0])
I[1]=([0,1,0,0])
I[2]=([0,0,1,0])
I[3]=([0,0,0,1])
print(I)

# ## 1.2 返回矩阵的行数和列数

def shape(M):
    row = len(M)
    col = len(M[0])
    return row,col

# ## 1.3 每个元素四舍五入到特定小数数位

def matxRound(M, decPts=4):
    for i in range(len(M)):
        for j in range(len(M[0])):
            M[i][j]= round(M[i][j],decPts)
    return M

# ## 1.4 计算矩阵的转置

def transpose(M):
    return  [list(col) for col in zip(*M)]

#zip(*M): 你的实现不被推荐，原因是最终的数据结构会是元组列表tuple list。
#元组元素是不可修改的，你可能会在一些要求原地修改的函数遇到错误。
#更进一步的，你的实现不能直接迁移到Python3，zip函数在Python3会返回一个生成器，而不是元组列表。


# ## 1.5 计算矩阵乘法 AB

# TODO 计算矩阵乘法 AB，如果无法相乘则raise ValueError
def matxMultiply(A, B):
    if len(A[0]) != len(B) :
        raise ValueError
    else:
        res = [[0] * len(B[0]) for i in range(len(A))]
        for i in range(len(A)):
            for j in range(len(B[0])):
                for k in range(len(B)):
                    res[i][j] += A[i][k] * B[k][j]

    return res 

# # 2 Gaussign Jordan 消元法
# 
# ## 2.1 构造增广矩阵
# 
# TODO 构造增广矩阵，假设A，b行数相同
def augmentMatrix(A, b):
    return [ra + rb for ra,rb in zip(A,b)]


#def augmentMatrix(A, b):
#    for i in range(len(A)):
#        A[i].append(b[i][0])
#    return A

# ## 2.2 初等行变换
# - 交换两行
# - 把某行乘以一个非零常数
# - 把某行加上另一行的若干倍：

# TODO r1 <---> r2
# 直接修改参数矩阵，无返回值
def swapRows(M, r1, r2):
    M[r1],M[r2]= M[r2],M[r1]
    return M

# TODO r1 <--- r1 * scale
# scale为0是非法输入，要求 raise ValueError
# 直接修改参数矩阵，无返回值
def scaleRow(M, r, scale):
    if scale == 0:
        raise ValueError
    else:   
        for i in range(len(M[r])):
            M[r][i]=(M[r][i])*scale
        return M

# TODO r1 <--- r1 + r2*scale

def addScaledRow(M, r1, r2, scale):
    for i in range(len(M[r1])):
        M[r1][i]=M[r1][i]+M[r2][i]*scale
    return M

# ## 2.3  Gaussian Jordan 消元法求解 Ax = b

# ### 2.3.1 算法
# 
# 步骤1 检查A，b是否行数相同
# 
# 步骤2 构造增广矩阵Ab
# 
# 步骤3 逐列转换Ab为化简行阶梯形矩阵
#     对于Ab的每一列（最后一列除外）
#         当前列为列c
#         寻找列c中 对角线以及对角线以下所有元素（行 c~N）的绝对值的最大值
#         如果绝对值最大值为0
#             那么A为奇异矩阵，返回None (你可以在选做问题2.4中证明为什么这里A一定是奇异矩阵)
#         否则
#             使用第一个行变换，将绝对值最大值所在行交换到对角线元素所在行（行c） 
#             使用第二个行变换，将列c的对角线元素缩放为1
#             多次使用第三个行变换，将列c的其他元素消为0
#             
# 步骤4 返回Ab的最后一列
# 
# **注：** 我们并没有按照常规方法先把矩阵转化为行阶梯形矩阵，再转换为化简行阶梯形矩阵，而是一步到位。如果你熟悉常规方法的话，可以思考一下两者的等价性。

# 不要修改这里！
from helper import *
    
# ### 2.3.3 实现 Gaussian Jordan 消元法

# TODO 实现 Gaussain Jordan 方法求解 Ax = b
"""
步骤1 检查A，b是否行数相同
步骤2 构造增广矩阵Ab
步骤3 逐列转换Ab为化简行阶梯形矩阵 中文维基链接
对于Ab的每一列（最后一列除外）
    当前列为列c
    寻找列c中 对角线以及对角线以下所有元素（行 c~N）的绝对值的最大值
    如果绝对值最大值为0
        那么A为奇异矩阵，返回None (你可以在选做问题2.4中证明为什么这里A一定是奇异矩阵)
    否则
        使用第一个行变换，将绝对值最大值所在行交换到对角线元素所在行（行c） 
        使用第二个行变换，将列c的对角线元素缩放为1
        多次使用第三个行变换，将列c的其他元素消为0
步骤4 返回Ab的最后一列
"""
""" Gaussian Jordan 方法求解 Ax = b.
    参数
        A: 方阵 
        b: 列向量
        decPts: 四舍五入位数，默认为4
        epsilon: 判读是否为0的阈值，默认 1.0e-16
        
    返回列向量 x 使得 Ax = b 
    返回None，如果 A，b 高度不同
    返回None，如果 A 为奇异矩阵
"""

def gj_Solve(A, b, decPts=4, epsilon = 1.0e-16):
    if len(A) != len(b): 
        return None

    else:
        Ab = augmentMatrix(A, b)  
        m = len(Ab)

    for i in range(m):
        maxrow = i

        for j in range(i, m):
            if abs(Ab[j][i]) > abs(Ab[maxrow][i]):
                maxrow = j

        if abs(Ab[maxrow][i]) <= epsilon:   
            return None

        else:
            swapRows(Ab, i, maxrow)  # swich the maxrow to the diagonal line
        
            scale1 = 1. /Ab[i][i]
            scaleRow(Ab, i, scale1)

        for j2 in range(m):
            if j2 != i:
                scale2 = -(Ab[j2][i])
                Ab = addScaledRow(Ab, j2, i, scale2)

    x = [[] for i in range(m)]
            
    for i in range(m):  
        x[i].append(Ab[i][-1])
    matxRound(x, decPts)
    return x

# # 3  线性回归

# ## 3.1 随机生成样本点

# 不要修改这里！
from helper import *
from matplotlib import pyplot as plt
get_ipython().magic(u'matplotlib inline')

X,Y = generatePoints(seed,num=100)

## 可视化
plt.xlim((-5,5))
plt.xlabel('x',fontsize=18)
plt.ylabel('y',fontsize=18)
plt.scatter(X,Y,c='b')
plt.show()

# ## 3.2 拟合一条直线
#TODO 请选择最适合的直线 y = kx + b
k = 3.3
b = 7

# 不要修改这里！
plt.xlim((-5,5))
x_vals = plt.axes().get_xlim()
y_vals = [k*x+b for x in x_vals]
plt.plot(x_vals, y_vals, '-', color='r')

plt.xlabel('x',fontsize=18)
plt.ylabel('y',fontsize=18)
plt.scatter(X,Y,c='b')

plt.show()

# ### 3.2.2 计算平均平方误差 (MSE)

# 我们要编程计算所选直线的平均平方误差(MSE), 即数据集中每个点到直线的Y方向距离的平方的平均数，表达式如下：
def calculateMSE(X,Y,m,b):
    num = len(X)
    MSE=0
    for i in range(num):
        MSE1 = (Y[i]-m*X[i]-b) ** 2
        MSE += MSE1
    MSE = MSE/num
    return MSE

print(calculateMSE(X,Y,3.3,7))

# ### 3.3.3 将方程组写成矩阵形式
# 
# 我们的二元二次方程组可以用更简洁的矩阵形式表达，将方程组写成矩阵形式更有利于我们使用 Gaussian Jordan 消元法求解。
# 
# 至此我们知道，通过求解方程 $X^TXh = X^TY$ 来找到最优参数。这个方程十分重要，他有一个名字叫做 **Normal Equation**，也有直观的几何意义。你可以在 [子空间投影](http://open.163.com/movie/2010/11/J/U/M6V0BQC4M_M6V2AJLJU.html) 和 [投影矩阵与最小二乘](http://open.163.com/movie/2010/11/P/U/M6V0BQC4M_M6V2AOJPU.html) 看到更多关于这个方程的内容。

# ### 3.4 求解 $X^TXh = X^TY$ 
# 
# 在3.3 中，我们知道线性回归问题等价于求解 $X^TXh = X^TY$ (如果你选择不做3.3，就勇敢的相信吧，哈哈)

# TODO 实现线性回归
'''
参数：X, Y
返回：m，b
'''
X,Y = generatePoints(seed,num=100)

def linearRegression(X,Y):
    X1=[[i,1] for i in X]
    Y1=[[i] for i in Y]
    XT = transpose(X1)
    
    XM = matxMultiply(XT,X1)
    YM = matxMultiply(XT,Y1)
    
    h= gj_Solve(XM, YM, decPts=4, epsilon = 1.0e-16)
    m=h[0][0]
    b=h[1][0]
    return m,b
m,b = linearRegression(X,Y)
                   
print(m,b)

# 你求得的回归结果是什么？它足够好了吗？请使用运行以下代码将它画出来。

# 请不要修改下面的代码
x1,x2 = -5,5
y1,y2 = x1*m+b, x2*m+b

plt.xlim((-5,5))
plt.xlabel('x',fontsize=18)
plt.ylabel('y',fontsize=18)
plt.scatter(X,Y,c='b')
plt.plot((x1,x2),(y1,y2),'r')
plt.text(1,2,'y = {m}x + {b}'.format(m=m,b=b))
plt.show()
